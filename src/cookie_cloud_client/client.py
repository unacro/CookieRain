import os
from loguru import logger
from PyCookieCloud import PyCookieCloud


class CookieCloud(object):

    def __init__(self, api_url: str, user_key: str, password: str) -> None:
        self._user_key = user_key
        self._client = PyCookieCloud(api_url, user_key, password)
        if not self._client.check_connection():
            logger.error("Connection failed. Check CookieCloud server " +
                         f"{api_url} is running.")
            raise RuntimeError("failed to connect server")
        else:
            logger.debug("api = [{}] (running)", self._client.url)

    def get_cookies(self, domain: str = "") -> dict:
        _cookies: dict = {}
        decrypted_data = self._client.get_decrypted_data()
        logger.debug("user_key = [{}]", self._client.uuid)
        logger.debug("password = [{}]", self._client.password)
        if not decrypted_data:
            logger.error("Decrypt cookies data failed. " +
                         "Check user_key / password pair is correct.")
            raise RuntimeError("failed to get decrypted data")
        # compatible while enable Local Storage
        if "cookie_data" in decrypted_data:
            decrypted_data = decrypted_data["cookie_data"]
        if domain in ["", "all"]:
            _cookies = decrypted_data
        elif domain in decrypted_data:
            _cookies[domain] = decrypted_data[domain]
        return _cookies

    def save_to(self, domain: str | list, file_path: str) -> bool:
        cookies_text: str = """\
# Netscape HTTP Cookie File
# http://curl.haxx.se/rfc/cookie_spec.html
# This file was generated by CookieRain

"""
        for site, cookies in self.get_cookies().items():
            if type(domain) == str and site != domain:
                continue
            elif type(domain) == list and site not in domain:
                continue
            for cookie in cookies:
                cookies_text += "\t".join([
                    cookie["domain"],
                    "TRUE" if cookie["domain"].startswith(".") else "FALSE",
                    cookie["path"],
                    "TRUE" if cookie["secure"] else "FALSE",
                    str(int(cookie["expirationDate"]
                            )) if "expirationDate" in cookie else "0",
                    cookie["name"],
                    cookie["value"],
                ]) + "\n"
        try:
            os.makedirs(file_path)
        except FileExistsError:
            pass
        except Exception as e:
            logger.error(f"Failed to create [{file_path}]: {str(e)}")
        try:
            file_name: str = f"{file_path}/{self._user_key}.cookies.txt"
            with open(file_name, mode="w", encoding="utf8") as f:
                f.write(cookies_text)
            logger.info("Already save cookies of {} to [{}]",
                        "All sites" if domain in ["", "all"] else domain,
                        file_name)
            return True
        except Exception as e:
            logger.error(f"Failed to write to [{file_path}]: {str(e)}")
        return False
